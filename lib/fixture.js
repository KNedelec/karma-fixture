// Generated by CoffeeScript 1.7.1
(function() {
  var Fixture,
    __slice = [].slice;

  Fixture = (function() {
    Fixture.el_id = 'fixture_container';

    function Fixture() {
      this.json = [];
      this.el = window.fixture_container || (function() {
        var container;
        container = document.createElement('div');
        container.setAttribute('id', Fixture.el_id);
        return document.body.appendChild(container);
      })();
    }

    Fixture.prototype.load = function() {
      var append, err, filename, filenames, json, results, string, _i, _j, _len;
      filenames = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), append = arguments[_i++];
      if (append == null) {
        append = false;
      }
      if (typeof append !== 'boolean') {
        filenames.push(append);
        append = false;
      }
      if (append === false) {
        this.cleanup();
      }
      results = [];
      for (_j = 0, _len = filenames.length; _j < _len; _j++) {
        filename = filenames[_j];
        string = (typeof __html__ !== "undefined" && __html__ !== null ? __html__[filename] : void 0) || '';
        if (filename.indexOf('.json') !== -1) {
          try {
            json = JSON.parse(string);
            this.json.push(json);
            results.push(json);
          } catch (_error) {
            err = _error;
          }
        } else {
          results.push(this._add_fixture(string));
        }
      }
      if (results.length === 1) {
        results = results[0];
      }
      return results;
    };

    Fixture.prototype.set = function() {
      var append, string, strings, _i, _j, _len, _results;
      strings = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), append = arguments[_i++];
      if (append == null) {
        append = false;
      }
      if (typeof append !== 'boolean') {
        strings.push(append);
        append = false;
      }
      if (append === false) {
        this.cleanup();
      }
      _results = [];
      for (_j = 0, _len = strings.length; _j < _len; _j++) {
        string = strings[_j];
        _results.push(this._add_fixture(string));
      }
      return _results;
    };

    Fixture.prototype.cleanup = function() {
      this.json = [];
      return this.el.innerHTML = '';
    };

    Fixture.prototype._add_fixture = function(html_string) {
      var i, results, temp_div;
      temp_div = document.createElement('div');
      temp_div.innerHTML = html_string;
      results = [];
      while ((i = temp_div.firstChild)) {
        if (i.nodeType !== 1) {
          temp_div.removeChild(i);
        } else {
          this.el.appendChild(i);
          results.push(i);
          if (i.nodeName === 'SCRIPT') {
            eval(i.innerText);
          }
        }
      }
      return results;
    };

    return Fixture;

  })();

  if (typeof exports === "object") {
    module.exports = Fixture;
  } else if (typeof define === "function" && define.amd) {
    define('fixture', [], function() {
      return Fixture;
    });
  } else {
    this['Fixture'] = Fixture;
  }

}).call(this);
